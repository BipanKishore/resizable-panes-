import React, {useRef, useState} from 'react'
import { addDefaultProps, getOnOffInitialState } from '../../../src/shared/utils'
import { rScontainerId } from '../../../src/shared/constant'
import { generatePaneModel } from '../panes-generator'
import { DemoHeader } from '../demo-header'
import { isOn } from '../multi-state-buttons/multi-state-button'
import { ResizablePanes } from 'resizable-panes-react'
import { MultiStateButtonGroup } from '../multi-state-buttons/multi-state-button-group'



interface IIDMap {
  [id: string]: boolean
}



export const ResizableDemo = (props: any) => {
  const currentProps = addDefaultProps(props, {
    uniqueId: rScontainerId
  })

  const {panesList, initalVisibility, zipping, destroyOnHide} = currentProps

  const [formValues, setFormValues] = useState<any>({
    paneId: '',
    newSize: 0,
    zipping: getOnOffInitialState(zipping),
    destroyOnHide: getOnOffInitialState(destroyOnHide),
    mount: 'on'
  })

  const onBtnChange = (e: any) => {
    const {name, value} = e
    setFormValues({
      ...formValues,
      [name]: value

    })
  }

  const onFormChange = (e: any) => {
    const {name, value} = e.target
    setFormValues({
      ...formValues,
      [name]: value

    })
  }

  const {paneComponentLists, initalVisibility: autoGeneratedInitalVisibility} = generatePaneModel(panesList)
  const initialPaneState = initalVisibility || autoGeneratedInitalVisibility

  const [paneVisibilityState, setPaneVisibilityState] = useState(initialPaneState)


  const onRestore = () => {
    apiRef.current.setVisibilities(initialPaneState)
    apiRef.current.restore()
  }

  const apiRef = useRef <any>({})

  const updateVisibilityMap = (e: any) => {
    debugger
    const {name, checked} = e
    const previousVisibilityState =  apiRef.current.getVisibilitiesMap()
    const previousState = previousVisibilityState[name]
    console.log(previousState, previousState, previousState)
    
    const newVisibilityMap = {
      ...paneVisibilityState,
      [name]: checked
    }
    apiRef.current.setVisibilities(newVisibilityMap)
    if(previousState === 'zipped'){
      console.log(previousState, previousState, previousState)
      apiRef.current.setSize(name, 100)
    }
    
  }

  return (
    <div className='h-100p w-100p' >

      <DemoHeader
        apiRef={apiRef}
        formValues={formValues}

        onBtnChange={onBtnChange}
        onFormChange={onFormChange}
        onRestore={onRestore}
      />

      <div className='h-300 w-100p'>
        {
          isOn(formValues.mount) &&
          <ResizablePanes
            onReady={(api) => {
              apiRef.current = api
            }}
            {...currentProps}
            destroyOnHide={isOn(formValues.destroyOnHide)}
            resizerClass='bg-slate-500'
            zipping={isOn(formValues.zipping)}
            onChangeVisibility={setPaneVisibilityState}
          >
            {paneComponentLists}
          </ResizablePanes>
        }

      </div>

      <MultiStateButtonGroup stateMap={paneVisibilityState} onClick={updateVisibilityMap} />

    </div>
  )
}
